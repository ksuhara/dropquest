rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAnyAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(address) {
      return isAnyAuthenticated() && request.auth.uid == address;
    }

    function isGoogleAuthenticated(email){
       return isAnyAuthenticated() && request.auth.token.email == email;
    }

    function documentPath(paths) {
      return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'));
    }

    function getData(path) {
      return get(path).data;
    }

    function nftContract(chainId, address) {
      return getData(documentPath(['chain', chainId, 'contracts', address]));
    }

    match /{path=**}/contracts/{contract}  {
      allow read: if true;
    }

    match /chain/{chain}/contracts/{contract}  {
      allow read, create, update, delete: if isUserAuthenticated(nftContract(chain, contract).owner);
      allow read: if isGoogleAuthenticated(nftContract(chain, contract).allowed);
    }

    match /chain/{chain}/contracts/{contract}/keys/{key}  {
      allow read: if isUserAuthenticated(nftContract(chain, contract).owner) || isGoogleAuthenticated(nftContract(chain, contract).allowed);
    }
  }
}
